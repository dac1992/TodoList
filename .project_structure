# TodoList 项目结构

## 整体架构
项目采用前后端分离架构,包含三个前端应用和一个后端服务:

├── backend                          # Laravel后端服务
├── web-front                        # Vue3前端项目(用户端)
├── web-admin                        # Vue3后台管理系统
└── mobile                          # uni-app移动端

## 技术栈
1. 前端技术栈
   - 用户端: Vue3 + Element Plus
   - 后台管理: Vue3 + Arco Design 
   - 移动端: uni-app
   - 状态管理: Pinia
   - 构建工具: Vite

2. 后端技术栈
   - 框架: Laravel 11
   - 数据库: MySQL 8.0
   - 缓存: Redis
   - 认证: JWT + Session

3. 部署环境
   - 服务器: 腾讯云 CVM
   - 数据库: 腾讯云 MySQL
   - 对象存储: 腾讯云 COS
   - Web服务器: Nginx

## 目录结构

### 后端项目 (backend)
backend/
├── app/
│ ├── Http/
│ │ ├── Controllers/ # 控制器
│ │ │ ├── AuthController.php # 认证控制器
│ │ │ ├── TodoController.php # 待办事项控制器
│ │ │ └── UserController.php # 用户控制器
│ │ ├── Middleware/ # 中间件
│ │ └── Requests/ # 表单验证
│ ├── Models/ # 数据模型
│ │ ├── User.php # 用户模型
│ │ ├── Todo.php # 待办事项模型
│ │ ├── Category.php # 分类模型
│ │ └── Tag.php # 标签模型
│ ├── Services/ # 服务层
│ └── Repositories/ # 数据仓库层
├── config/ # 配置文件
├── database/
│ └── migrations/ # 数据库迁移文件
└── routes/
└── api.php # API路由

### 用户端前端 (web-front)
web-front/
├── src/
│ ├── api/ # API接口
│ ├── assets/ # 静态资源
│ ├── components/ # 通用组件
│ ├── composables/ # 组合式函数
│ ├── layouts/ # 布局组件
│ ├── router/ # 路由配置
│ ├── store/ # 状态管理
│ └── views/ # 页面组件
└── package.json

### 后台管理系统 (web-admin)
web-admin/
├── src/
│ ├── api/ # API接口
│ ├── assets/ # 静态资源
│ ├── components/ # 组件
│ ├── layouts/ # 布局
│ ├── router/ # 路由
│ ├── store/ # 状态管理
│ └── views/ # 页面
└── package.json

### 移动端应用 (mobile)
mobile/
├── src/
│ ├── api/ # API接口
│ ├── components/ # 组件
│ ├── pages/ # 页面
│ ├── static/ # 静态资源
│ ├── store/ # 状态管理
│ └── utils/ # 工具函数
└── package.json

## 核心功能模块

1. 用户系统
   - 用户注册/登录
   - 微信登录集成
   - RBAC权限管理
   - 用户信息管理

2. 待办事项管理
   - 待办事项 CRUD
   - 状态流转管理
   - 分类管理
   - 标签系统
   - 优先级设置

3. 后台管理
   - 用户管理
   - 系统监控
   - 数据统计
   - 操作日志

## 数据库设计
1. users - 用户表
2. todos - 待办事项表
3. categories - 分类表
4. tags - 标签表
5. todo_tags - 待办事项标签关联表

## 开发规范
1. 代码规范
   - 使用 ESLint + Prettier 规范前端代码
   - 使用 PSR 规范规范 PHP 代码
   - 遵循 TypeScript 类型定义规范

2. 开发流程
   - 遵循 Git Flow 工作流
   - 编写单元测试
   - 进行代码审查
   - 持续集成/持续部署

3. 文档维护
   - 及时更新 API 文档
   - 编写开发文档
   - 维护项目 Wiki